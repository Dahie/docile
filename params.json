{"name":"Docile","tagline":"Docile keeps your Ruby DSLs tame and well-behaved","body":"# Docile\r\n\r\nDocile is a small, self-contained Ruby library, that let's you map a DSL (domain specific language) to your Ruby objects in a snap.\r\n\r\n### Let's take a look\r\n\r\nLet's say that we want to make a DSL for modifying Array objects.\r\nWouldn't it be great if we could just treat the methods of Array as a DSL?\r\n\r\n```ruby\r\nwith_array([]) do\r\n  push 1\r\n  push 2\r\n  pop\r\n  push 3\r\nend\r\n# => [1, 3]\r\n```\r\n\r\nNo problem, just define the method `with_array` using `Docile` like this:\r\n``` ruby\r\ndef with_array(arr=[], &block)\r\n  Docile.dsl_eval(arr, &block)\r\nend\r\n```\r\n\r\nBig deal, right? Well guess what! It handles the rough edges for you, so you can use _functions_, _instance variables_, and _local variables_ in your DSL with no sweat:\r\n```ruby\r\ndef question\r\n  \"What is the answer...?\"\r\nend\r\n\r\n@answer = 42\r\n\r\nknowledge = { \"towel\" => true }\r\n\r\nDocile.dsl_eval({}) do\r\n  store question, @answer\r\n  merge! knowledge\r\nend\r\n# => {\"What is the answer...?\"=>42, \"towel\"=>true}\r\n```\r\n\r\n### Cool\r\n\r\nOk, I want to [learn more!](https://github.com/ms-ati/docile)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}